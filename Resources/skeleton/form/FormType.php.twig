<?php

namespace {{ namespace }}\Form{{ entity_namespace ? '\\' ~ entity_namespace : '' }};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
{% if not configure_options_available %}
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
{% endif %}
use Symfony\Component\OptionsResolver\OptionsResolver;
{% set formTypes = [] %}
{% for field, metadata in fields -%}
    {%- if field is defined and metadata.type in ['date', 'time', 'datetime'] %}
        {% if metadata.type not in formTypes %}
            {% set formTypes = formTypes|merge([metadata.type]) %}
        {% endif %}        
    {%- endif %}
{%- endfor %}
{% for formType in formTypes %}
{% if formType == 'date' %}
use Symfony\Component\Form\Extension\Core\Type\DateType;        
{% endif %}
{% if formType == 'datetime' %}
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;        
{% endif %}
{% if formType == 'time' %}
use Symfony\Component\Form\Extension\Core\Type\TimeType;        
{% endif %}
{% endfor %}

{% endblock use_statements %}

{% block class_definition %}
class {{ form_class }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {%- if fields|length > 0 %}
    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
        {% for field, metadata in fields -%}
        {%- if field is defined and metadata.type in ['date', 'time', 'datetime'] %}            
        {%- if metadata.type == 'date' %}

            ->add('{{ field }}', DateType::class, [
                'label' => '{{ field|capitalize }}',
                'widget' => 'single_text',
                'format' => 'dd-MM-yyyy',
                'attr' => [
                    'data-provide' => 'datepicker',
                    'data-date-format' => 'dd-mm-yyyy',
                    'data-date-language' => 'es'
                ]
            ])
        {%- elseif metadata.type == 'datetime' %}

            ->add('{{ field }}', DateTimeType::class, [
                'label' => '{{ field|capitalize }}'
            ])            
        {%- elseif metadata.type == 'time' %}

            ->add('{{ field }}', TimeType::class, [
                'label' => '{{ field|capitalize }}'
            ])
        {%- else %}

            ->add('{{ field }}', '{{ metadata.type }}', [
                'label' => '{{ field|capitalize }}'
            ])            

        {%- endif %}

        {%- elseif field != 'id' %}
        {%- if metadata.type in ['relation', 'relation_many'] %}

            ->add('{{ field }}', null, [
                'label' => '{{ field|capitalize }}'
            ])
        {%- else %}
        
            ->add('{{ field }}', null, [
                'label' => '{{ field|capitalize }}'
            ])
        {%- endif %}    
        {%- endif %}
        {%- endfor %}

        ;
    }
    {% endif %}

    {%- if not configure_options_available %}

    /**
     * Sets the default options for this type.
     *
     * This method should be removed when upgrading to Symfony 2.7.
     *
     * @param OptionsResolverInterface $resolver
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $this->configureOptions($resolver);
    }
    {% endif %}

    /**
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '{{ namespace }}\Entity{{ entity_namespace ? '\\' ~ entity_namespace : '' }}\{{ entity_class }}'
        ));
    }

    {%- if get_name_required %}

    /**
     * @return string
     */
    public function getName()
    {
        return '{{ form_type_name }}';
    }
    {% endif %}

{% endblock class_body %}
}
